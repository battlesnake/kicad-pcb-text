from typing import Any

from .pcb_track import PCB_TRACK


class PCB_VIA(PCB_TRACK):

    def GetViaType(self) -> Any:
        ...

    def SetViaType(self, aViaType) -> Any:
        ...

    def GetSolderMaskExpansion(self) -> Any:
        ...

    def SetLayerPair(self, aTopLayer: int, aBottomLayer: int) -> Any:
        ...

    def SetBottomLayer(self, aLayer: int) -> Any:
        ...

    def SetTopLayer(self, aLayer: int) -> Any:
        ...

    def LayerPair(self, top_layer: int, bottom_layer: int) -> Any:
        ...

    def TopLayer(self) -> int:
        ...

    def BottomLayer(self) -> int:
        ...

    def SanitizeLayers(self) -> Any:
        ...

    def HitTest(self, *args) -> Any:
        ...

    def ViewGetLOD(self, aLayer, aView) -> Any:
        ...

    def GetMinAnnulus(self, aLayer, aSource) -> Any:
        ...

    def SetRemoveUnconnected(self, aSet) -> Any:
        ...

    def GetRemoveUnconnected(self) -> Any:
        ...

    def SetKeepStartEnd(self, aSet) -> Any:
        ...

    def GetKeepStartEnd(self) -> Any:
        ...

    def ConditionallyFlashed(self, aLayer) -> Any:
        ...

    def FlashLayer(self, *args) -> Any:
        ...

    def SetDrill(self, aDrill) -> Any:
        ...

    def GetDrill(self) -> Any:
        ...

    def GetDrillValue(self) -> Any:
        ...

    def SetDrillDefault(self) -> Any:
        ...

    def GetIsFree(self) -> Any:
        ...

    def SetIsFree(self, aFree=True) -> Any:
        ...

    def IsDrillDefault(self) -> Any:
        ...

    def GetEffectiveShape(self, *args) -> Any:
        ...

    def ClearZoneLayerOverrides(self) -> Any:
        ...

    def GetZoneLayerOverride(self, aLayer) -> Any:
        ...

    def SetZoneLayerOverride(self, aLayer, aOverride) -> Any:
        ...
