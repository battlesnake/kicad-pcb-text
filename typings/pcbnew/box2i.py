from typing import Union, overload

from .eda_angle import EDA_ANGLE
from .vector2i import VECTOR2I


class BOX2I():

    def __init__(self, aPos: VECTOR2I = VECTOR2I(), aSize: VECTOR2I = VECTOR2I()):
        ...

    def SetMaximum(self) -> None:
        ...

    def Centre(self) -> VECTOR2I:
        ...

    def Move(self, aMoveVector: VECTOR2I) -> "BOX2I":
        ...

    def Normalize(self) -> "BOX2I":
        ...

    @overload
    def Contains(self, aPoint: VECTOR2I) -> bool:
        ...

    @overload
    def Contains(self, aRect: "BOX2I") -> bool:
        ...

    @overload
    def Contains(self, x: int, y: int) -> bool:
        ...

    def Contains(self, *args) -> bool:
        ...

    def GetSize(self) -> "VECTOR2I":
        ...

    def GetX(self) -> int:
        ...

    def GetY(self) -> int:
        ...

    def GetOrigin(self) -> "VECTOR2I":
        ...

    def GetPosition(self) -> "VECTOR2I":
        ...

    def GetEnd(self) -> "VECTOR2I":
        ...

    def GetWidth(self) -> int:
        ...

    def GetHeight(self) -> int:
        ...

    def GetRight(self) -> int:
        ...

    def GetBottom(self) -> int:
        ...

    def GetLeft(self) -> int:
        ...

    def GetTop(self) -> int:
        ...

    def GetCenter(self) -> "VECTOR2I":
        ...

    def GetSizeMax(self) -> int:
        ...

    def SetOrigin(self, pos: VECTOR2I) -> None:
        ...

    def SetSize(self, size: VECTOR2I) -> None:
        ...

    def Offset(self, offset: VECTOR2I) -> None:
        ...

    def SetX(self, val: int) -> None:
        ...

    def SetY(self, val: int) -> None:
        ...

    def SetWidth(self, val: int) -> None:
        ...

    def SetHeight(self, val: int) -> None:
        ...

    def SetEnd(self, pos: VECTOR2I) -> None:
        ...

    def Intersect(self, aRect: "BOX2I") -> "BOX2I":
        ...

    def Intersects(self, other: Union["BOX2I", VECTOR2I]) -> bool:
        ...

    def IntersectsCircle(self, aCenter: VECTOR2I, aRadius: int) -> bool:
        ...

    def IntersectsCircleEdge(self, aCenter: VECTOR2I, aRadius: int, aWidth: int) -> bool:
        ...

    def Format(self) -> str:
        ...

    def Inflate(self, x: int, y: int) -> "BOX2I":
        ...

    def Merge(self, other: Union[VECTOR2I, "BOX2I"]) -> "BOX2I":
        ...

    def GetBoundingBoxRotated(self, aRotCenter: VECTOR2I, aAngle: EDA_ANGLE) -> "BOX2I":
        ...

    def RevertYAxis(self) -> None:
        ...

    def GetArea(self) -> int:
        ...

    def Diagonal(self) -> int:
        ...

    def SquaredDistance(self, val: Union[VECTOR2I, "BOX2I"]) -> int:
        ...

    def Distance(self, val: Union[VECTOR2I, "BOX2I"]) -> int:
        ...

    def ClosestPointTo(self, aPoint: VECTOR2I) -> VECTOR2I:
        ...

    def FarthestPointTo(self, aPoint: VECTOR2I) -> VECTOR2I:
        ...

    def __eq__(self, aOther: "BOX2I") -> bool:
        ...

    def __ne__(self, aOther: "BOX2I") -> bool:
        ...
