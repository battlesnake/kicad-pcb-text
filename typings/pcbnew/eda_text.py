from typing import Any


FILLED = int


# TODO
class EDA_TEXT():

    def __init__(self, *args) -> Any:
        ...

    def GetText(self) -> Any:
        ...

    def GetShownText(self, aDepth=0, aAllowExtraText=True) -> Any:
        ...

    def HasTextVars(self) -> Any:
        ...

    def SetText(self, aText) -> Any:
        ...

    def SetTextThickness(self, aWidth) -> Any:
        ...

    def GetTextThickness(self) -> Any:
        ...

    def GetEffectiveTextPenWidth(self, aDefaultPenWidth=0) -> Any:
        ...

    def SetTextAngle(self, aAngle) -> Any:
        ...

    def GetTextAngle(self) -> Any:
        ...

    def SetTextAngleDegrees(self, aOrientation) -> Any:
        ...

    def GetTextAngleDegrees(self) -> Any:
        ...

    def SetItalic(self, aItalic) -> Any:
        ...

    def IsItalic(self) -> Any:
        ...

    def SetBold(self, aBold) -> Any:
        ...

    def IsBold(self) -> Any:
        ...

    def SetVisible(self, aVisible) -> Any:
        ...

    def IsVisible(self) -> Any:
        ...

    def SetMirrored(self, isMirrored) -> Any:
        ...

    def IsMirrored(self) -> Any:
        ...

    def SetMultilineAllowed(self, aAllow) -> Any:
        ...

    def IsMultilineAllowed(self) -> Any:
        ...

    def SetHorizJustify(self, aType) -> Any:
        ...

    def GetHorizJustify(self) -> Any:
        ...

    def SetVertJustify(self, aType) -> Any:
        ...

    def GetVertJustify(self) -> Any:
        ...

    def SetKeepUpright(self, aKeepUpright) -> Any:
        ...

    def IsKeepUpright(self) -> Any:
        ...

    def SwapAttributes(self, aTradingPartner) -> Any:
        ...

    def SwapText(self, aTradingPartner) -> Any:
        ...

    def CopyText(self, aSrc) -> Any:
        ...

    def SetAttributes(self, *args) -> Any:
        ...

    def GetAttributes(self) -> Any:
        ...

    def Replace(self, aSearchData) -> Any:
        ...

    def IsDefaultFormatting(self) -> Any:
        ...

    def SetFont(self, aFont) -> Any:
        ...

    def GetFont(self) -> Any:
        ...

    def GetFontName(self) -> Any:
        ...

    def SetLineSpacing(self, aLineSpacing) -> Any:
        ...

    def GetLineSpacing(self) -> Any:
        ...

    def SetTextSize(self, aNewSize) -> Any:
        ...

    def GetTextSize(self) -> Any:
        ...

    def SetTextWidth(self, aWidth) -> Any:
        ...

    def GetTextWidth(self) -> Any:
        ...

    def SetTextHeight(self, aHeight) -> Any:
        ...

    def GetTextHeight(self) -> Any:
        ...

    def SetTextColor(self, aColor) -> Any:
        ...

    def GetTextColor(self) -> Any:
        ...

    def SetTextPos(self, aPoint) -> Any:
        ...

    def GetTextPos(self) -> Any:
        ...

    def SetTextX(self, aX) -> Any:
        ...

    def SetTextY(self, aY) -> Any:
        ...

    def Offset(self, aOffset) -> Any:
        ...

    def Empty(self) -> Any:
        ...

    def Print(self, aSettings, aOffset, aColor, aDisplay_mode=FILLED) -> Any:
        ...

    def TransformBoundingBoxToPolygon(self, aBuffer, aClearance) -> Any:
        ...

    def GetEffectiveTextShape(self, aTriangulate=True, aUseTextRotation=True) -> Any:
        ...

    def TextHitTest(self, *args) -> Any:
        ...

    def GetTextBox(self, aLine=-1, aInvertY=False) -> Any:
        ...

    def GetInterline(self) -> Any:
        ...

    def GetTextStyleName(self) -> Any:
        ...

    def GetLinePositions(self, aPositions, aLineCount) -> Any:
        ...

    def Format(self, aFormatter, aNestLevel, aControlBits) -> Any:
        ...

    def GetDrawRotation(self) -> Any:
        ...

    def GetDrawPos(self) -> Any:
        ...

    def ClearRenderCache(self) -> Any:
        ...

    def ClearBoundingBoxCache(self) -> Any:
        ...

    def GetRenderCache(self, *args) -> Any:
        ...

    def SetupRenderCache(self, aResolvedText, aAngle) -> Any:
        ...

    def AddRenderCacheGlyph(self, aPoly) -> Any:
        ...

    def Compare(self, aOther) -> Any:
        ...

    def HasHyperlink(self) -> Any:
        ...

    def GetHyperlink(self) -> Any:
        ...

    def SetHyperlink(self, aLink) -> Any:
        ...

    def RemoveHyperlink(self) -> Any:
        ...
