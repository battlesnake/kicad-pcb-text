from typing import Literal, Sequence, Union
from dataclasses import dataclass
from abc import ABC, abstractmethod

def GetUserUnits() -> int: ...

def Refresh(): ...

class wxString(): ...

def GetBoard() -> "BOARD" | None: ...

def LoadBoard(path: str) -> "BOARD" | None: ...

def GetBuildVersion() -> wxString: ...

@dataclass
class VECTOR2I():
	x: int
	y: int
	def __add__(self, rhs: "VECTOR2I") -> "VECTOR2I": ...
	def __sub__(self, rhs: "VECTOR2I") -> "VECTOR2I": ...

class ActionPlugin(ABC):
	def register(self) -> None: ...
	@abstractmethod
	def defaults(self) -> None: ...
	@abstractmethod
	def Run(self) -> None: ...

class KIID():
	def AsString(self) -> wxString: ...

class KIID_PATH(Sequence[KIID]): ...

class BOX2I():
	def GetLeft(self) -> int: ...
	def GetTop(self) -> int: ...
	def GetRight(self) -> int: ...
	def GetBottom(self) -> int: ...
	def GetWidth(self) -> int: ...
	def GetHeight(self) -> int: ...
	def GetArea(self) -> float: ...
	def Common(self, other: "BOX2I") -> "BOX2I": ...

TENTHS_OF_A_DEGREE_T = "placeholder value for tenths of a degree"
DEGREE_T = "placeholder value for degree"

EDA_ANGLE_T = Union[Literal[TENTHS_OF_A_DEGREE_T], Literal[DEGREE_T]]

class EDA_ANGLE():
    def __init__(self, value: float, angle_type: EDA_ANGLE_T): ...
    def AsDegrees(self) -> float: ...
    def AsRadians(self) -> float: ...
    def AsTenthsOfADegree(self) -> int: ...

class ZONES(): ...

class EDA_ITEM():
	def GetParent(self) -> "EDA_ITEM": ...
	def IsSelected(self) -> bool: ...
	def IsBrightened(self) -> bool: ...
	def SetSelected(self) -> None: ...
	def SetBrightened(self) -> None: ...
	def ClearSelected(self) -> None: ...
	def ClearBrightened(self) -> None: ...
	def GetPosition(self) -> VECTOR2I: ...
	def SetPosition(self, value: VECTOR2I) -> None: ...

class BOARD_ITEM(EDA_ITEM):
	def GetBoard(self) -> "BOARD": ...
	def GetParent(self) -> "BOARD_ITEM_CONTAINER": ...
	def Duplicate(self) -> "BOARD_ITEM": ...
	def IsLocked(self) -> bool: ...
	def Move(self, delta: VECTOR2I) -> None: ...
	def Rotate(self, axis: VECTOR2I, angle: int) -> None: ...
	def Flip(self, centre: VECTOR2I, todo_name_this: bool) -> None: ...
	def Cast(self) -> "BOARD_ITEM": ...
	def SetLayer(self, layer: int) -> None: ...

class BOARD_CONNECTED_ITEM(BOARD_ITEM): ...
class PCB_PAD(BOARD_CONNECTED_ITEM): ...
class PCB_TRACK(BOARD_CONNECTED_ITEM): ...
class ZONE(BOARD_CONNECTED_ITEM): ...
class PCB_VIA(PCB_TRACK): ...
class PCB_ARC(PCB_TRACK): ...

class PCB_FIELD(BOARD_ITEM):
	def SetBold(self, value: bool) -> None: ...
	def SetItalic(self, value: bool) -> None: ...
	def SetTextAngle(self, value: EDA_ANGLE) -> None: ...
	def SetTextWidth(self, value: int) -> None: ...
	def SetTextHeight(self, value: int) -> None: ...
	def SetTextThickness(self, value: int) -> None: ...
	def SetKeepUpright(self, value: bool) -> None: ...
	def SetVisible(self, value: bool) -> None: ...
	def GetParentFootprint(self) -> "FOOTPRINT": ...
	def GetBoundingBox(self) -> BOX2I: ...

class BOARD_ITEM_CONTAINER(BOARD_ITEM):
	def Add(self, item: BOARD_ITEM) -> None: ...
	def Remove(self, item: BOARD_ITEM) -> None: ...
	def Delete(self, item: BOARD_ITEM) -> None: ...
	def AddNative(self, item: BOARD_ITEM) -> None: ...
	def RemoveNative(self, item: BOARD_ITEM) -> None: ...
	def DeleteNative(self, item: BOARD_ITEM) -> None: ...
class FOOTPRINT(BOARD_ITEM_CONTAINER):
	def GetPath(self) -> KIID_PATH: ...
	def IsFlipped(self) -> bool: ...
	def GetOrientation(self) -> EDA_ANGLE: ...
	def GetOrientationDegrees(self) -> float: ...
	def SetOrientation(self, value: EDA_ANGLE) -> None: ...
	def SetOrientationDegrees(self, value: float) -> None: ...
	def GetBoundingBox(self, include_text: bool, include_invisible_text: bool) -> BOX2I: ...
	def Reference(self) -> PCB_FIELD: ...
	def Value(self) -> PCB_FIELD: ...
	def GetReference(self) -> wxString: ...
	def GetValue(self) -> wxString: ...
class BOARD(BOARD_ITEM_CONTAINER):
	def GetFileName(self) -> wxString: ...
	def GetFootprints(self) -> Sequence[FOOTPRINT]: ...
	def GetLayerID(self, name: wxString) -> int: ...
	def Footprints(self) -> Sequence[FOOTPRINT]: ...
	def Tracks(self) -> Sequence[PCB_TRACK]: ...
	def Drawings(self) -> Sequence[BOARD_ITEM]: ...
	def Zones(self) -> Sequence[ZONE]: ...

class PCB_TEXT(BOARD_ITEM): ...
class PCB_SHAPE(BOARD_ITEM): ...
class FP_SHAPE(PCB_SHAPE): ...
