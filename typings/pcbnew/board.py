from typing import Any, Dict, Sequence, Set, Tuple
from eda_item import EDA_ITEM
from board_item import BOARD_ITEM
from board_item_container import BOARD_ITEM_CONTAINER


class BOARD(BOARD_ITEM_CONTAINER):

    def __init__ (self, *args, **kwargs):
        ...

    def SetBoardUse(self, aUse: "BOARD_USE") -> None:
        ...

    def GetBoardUse(self) -> "BOARD_USE":
        ...

    def IncrementTimeStamp(self) -> None:
        ...

    def GetTimeStamp(self) -> int:
        ...

    def IsFootprintHolder(self) -> bool:
        ...

    def SetFileName(self, aFileName: str) -> None:
        ...

    def GetFileName(self) -> str:
        ...

    def Tracks(self, *args) -> "TRACKS":
        ...

    def Footprints(self, *args) -> "FOOTPRINTS":
        ...

    def Drawings(self, *args) -> "DRAWINGS":
        ...

    def Zones(self, *args) -> "ZONES":
        ...

    def Markers(self, *args) -> "MARKERS":
        ...

    def Groups(self, *args) -> "GROUPS":
        ...

    def AllConnectedItems(self) -> Sequence["BOARD_CONNECTED_ITEM"]:
        ...

    def GetProperties(self) -> Dict[str, str]:
        ...

    def SetProperties(self, aProps: Dict[str, str]) -> None:
        ...

    def ResolveTextVar(self, token: str, aDepth: int) -> bool:
        ...

    def GetPosition(self) -> "wxPoint":
        ...

    def SetPosition(self, aPos: "wxPoint") -> None:
        ...

    def GetFocusPosition(self) -> "wxPoint":
        ...

    def IsEmpty(self) -> bool:
        ...

    def Move(self, aMoveVector: "wxPoint") -> None:
        ...

    def SetFileFormatVersionAtLoad(self, aVersion: int) -> None:
        ...

    def GetFileFormatVersionAtLoad(self) -> int:
        ...

    def SetGenerator(self, aGenerator: str) -> None:
        ...

    def GetGenerator(self) -> str:
        ...

    def AddNative(self, *args) -> None:
        ...

    def RemoveNative(self, *args) -> None:
        ...

    def FinalizeBulkAdd(self, aNewItems: Sequence[BOARD_ITEM]) -> None:
        ...

    def FinalizeBulkRemove(self, aRemovedItems: Sequence[BOARD_ITEM]) -> None:
        ...

    def GetFirstFootprint(self) -> "FOOTPRINT":
        ...

    def DeleteAllFootprints(self) -> None:
        ...

    def GetItem(self, aID: "KIID") -> "BOARD_ITEM":
        ...

    def FillItemMap(self, aMap: Dict["KIID", "EDA_ITEM"]) -> None:
        ...

    def ConvertCrossReferencesToKIIDs(self, aSource: str) -> str:
        ...

    def ConvertKIIDsToCrossReferences(self, aSource: str) -> str:
        ...

    def GetConnectivity(self) -> "CONNECTIVITY_DATA":
        ...

    def BuildConnectivity(self, aReporter: "PROGRESS_REPORTER" = None) -> None:
        ...

    def DeleteMARKERs(self, *args) -> None:
        ...

    def GetProject(self) -> "PROJECT":
        ...

    def SetProject(self, aProject: "PROJECT") -> None:
        ...

    def ClearProject(self) -> None:
        ...

    def ResolveDRCExclusions(self) -> Sequence["PCB_MARKER"]:
        ...

    def ResetNetHighLight(self) -> None:
        ...

    def GetHighLightNetCodes(self) -> Set[int]:
        ...

    def SetHighLightNet(self, aNetCode: int, aMulti: bool=False) -> None:
        ...

    def IsHighLightNetON(self) -> bool:
        ...

    def HighLightON(self, aValue: bool=True) -> None:
        ...

    def HighLightOFF(self) -> None:
        ...

    def GetCopperLayerCount(self) -> int:
        ...

    def SetCopperLayerCount(self, aCount: int) -> None:
        ...

    def GetEnabledLayers(self) -> "LSET":
        ...

    def SetEnabledLayers(self, aLayerMask: "LSET") -> None:
        ...

    def IsLayerEnabled(self, aLayer: "PCB_LAYER_ID") -> bool:
        ...

    def IsLayerVisible(self, aLayer: "PCB_LAYER_ID") -> bool:
        ...

    def GetVisibleLayers(self) -> "LSET":
        ...

    def SetVisibleLayers(self, aLayerMask: "LSET") -> None:
        ...

    def GetVisibleElements(self) -> "GAL_SET":
        ...

    def SetVisibleElements(self, aMask: "GAL_SET") -> None:
        ...

    def SetVisibleAlls(self) -> None:
        ...

    def IsElementVisible(self, aLayer: "GAL_LAYER_ID") -> bool:
        ...

    def SetElementVisibility(self, aLayer: "GAL_LAYER_ID", aNewState: bool) -> None:
        ...

    def IsFootprintLayerVisible(self, aLayer: "PCB_LAYER_ID") -> bool:
        ...

    def GetDesignSettings(self) -> "BOARD_DESIGN_SETTINGS":
        ...

    def GetZoneSettings(self) -> "ZONE_SETTINGS":
        ...

    def SetZoneSettings(self, aSettings: "ZONE_SETTINGS") -> None:
        ...

    def GetPageSettings(self) -> "PAGE_INFO":
        ...

    def SetPageSettings(self, aPageSettings: "PAGE_INFO") -> None:
        ...

    def GetPlotOptions(self) -> "PCB_PLOT_PARAMS":
        ...

    def SetPlotOptions(self, aOptions: "PCB_PLOT_PARAMS") -> None:
        ...

    def GetTitleBlock(self, *args) -> "TITLE_BLOCK":
        ...

    def SetTitleBlock(self, aTitleBlock: "TITLE_BLOCK") -> None:
        ...

    def GetSelectMenuText(self, aUnits: "EDA_UNITS") -> str:
        ...

    def GetBoardPolygonOutlines(self, aOutlines: "SHAPE_POLY_SET", aErrorHandler: "OUTLINE_ERROR_HANDLER" = None) -> bool:
        ...

    def ConvertBrdLayerToPolygonalContours(self, aLayer: "PCB_LAYER_ID", aOutlines: "SHAPE_POLY_SET") -> None:
        ...

    def GetLayerID(self, aLayerName: str) -> "PCB_LAYER_IT":
        ...

    def GetLayerName(self, aLayer: "PCB_LAYER_ID") -> str:
        ...

    def SetLayerName(self, aLayer: "PCB_LAYER_ID", aLayerName: str) -> bool:
        ...

    def SetLayerDescr(self, aIndex: "PCB_LAYER_ID", aLayer: "LAYER") -> bool:
        ...

    def GetLayerType(self, aLayer: "PCB_LAYER_ID") -> "LAYER_T":
        ...

    def SetLayerType(self, aLayer: "PCB_LAYER_ID", aLayerType: "LAYER_T") -> bool:
        ...

    def GetNodesCount(self, aNet: int=-1) -> int:
        ...

    def GetUnconnectedNetCount(self) -> int:
        ...

    def GetPads(self) -> Sequence["PAD"]:
        ...

    def BuildListOfNets(self) -> None:
        ...

    def FindNet(self, *args) -> "NETINFO_ITEM":
        ...

    def GetNetInfo(self, *args) -> "NETINFO_LIST":
        ...

    def GetNetCount(self) -> int:
        ...

    def ComputeBoundingBox(self, aBoardEdgesOnly: bool = False) -> "EDA_RECT":
        ...

    def GetBoundingBox(self) -> "EDA_RECT":
        ...

    def GetBoardEdgesBoundingBox(self) -> "EDA_RECT":
        ...

    def GetMsgPanelInfo(self, aFrame: "EDA_DRAW_FRAME", aList: "MSG_PANEL_ITEM") -> None:
        ...

    def Visit(self, inspector: "INSPECTOR", testData: Any, scanTypes: Sequence["KICAD_T"]) -> "SEARCH_RESULT":
        ...

    def FindFootprintByReference(self, aReference: str) -> "FOOTPRINT":
        ...

    def FindFootprintByPath(self, aPath: "KIID_PATH") -> "FOOTPRINT":
        ...

    def GetNetClassAssignmentCandidates(self) -> Sequence[str]:
        ...

    def SynchronizeNetsAndNetClasses(self) -> None:
        ...

    def SynchronizeProperties(self) -> None:
        ...

    def GetClass(self) -> str:
        ...

    def SetAreasNetCodesFromNetNames(self) -> int:
        ...

    def GetArea(self, index: int) -> "ZONE":
        ...

    def GetZoneList(self, aIncludeZonesInFootprints: bool=False) -> Sequence["ZONE"]:
        ...

    def GetAreaCount(self) -> int:
        ...

    def AddArea (self, aNewZonesList: "PICKED_ITEMS_LIST", aNetcode: int, aLayer: "PCB_LAYER_ID", aStartPointPosition: "wxPoint", aHatch: "ZONE_BORDER_DISPLAY_STYLE") -> "ZONE":
        ...

    def TestZoneIntersection(self, aZone1: "ZONE", aZone2: "ZONE") -> bool:
        ...

    def GetPadFast(self, aPosition: "wxPoint", aLayerMask: "LSET") -> "PAD":
        ...

    def GetPad(self, *args) -> "PAD":
        ...

    def PadDelete(self, aPad: "PAD") -> None:
        ...

    def GetSortedPadListByXthenYCoord(self, aVector: "PADS_VEC",  aNetCode: int=-1) -> None:
        ...

    def GetTrackLength(self, aTrack: "PCB_TRACK") -> Tuple[int, float, float]:
        ...

    def TracksInNet(self, aNetCode: int) -> "TRACKS":
        ...

    def GetFootprint (self, aPosition: "wxPoint", aActiveLayer: "PCB_LAYER_ID", aVisibleOnly: bool,  aIgnoreLocked: bool = False) -> "FOOTPRINT":
        ...

    def ClearAllNetCodes(self) -> None:
        ...

    def MapNets(self, aDestBoard: "BOARD") -> None:
        ...

    def SanitizeNetcodes(self) -> None:
        ...

    def AddListener(self, aListener: "BOARD_LISTENER") -> None:
        ...

    def RemoveListener(self, aListener: "BOARD_LISTENER") -> None:
        ...

    def OnItemChanged(self, aItem: "BOARD_ITEM") -> None:
        ...

    def OnItemsChanged(self, aItems: Sequence["BOARD_ITEM"]) -> None:
        ...

    def GroupsSanityCheck(self, repair: bool=False) -> str:
        ...

    def GroupsSanityCheckInternal(self, repair: bool) -> str:
        ...

    def GroupLegalOps(self, selection: "PCB_SELECTION") -> "BOARD::GroupLegalOpsField":

        def	__init__(self, *args):
            ...

    def	GetFootprints(self):
        ...

    def	GetDrawings(self):
        ...

    def	GetTracks(self):
        ...

    def	Save(self, filename: str):
        ...

    def	GetNetClasses(self):
        ...

    def	GetCurrentNetClassName(self):
        ...

    def	GetViasDimensionsList(self):
        ...

    def	GetTrackWidthList(self):
        ...

    def	GetNetsByName(self):
        ...

    def	GetNetsByNetcode(self):
        ...

    def	GetNetcodeFromNetname(self, netname: str):
        ...

    def	GetAllNetClasses(self):
        ...
